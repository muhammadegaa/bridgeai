import React, { useState, useEffect } from 'react';
import { useAuth } from '../contexts/AuthContext';
import { 
  MessageCircle, 
  Clock, 
  Star, 
  ArrowRight,
  Calendar,
  Users,
  Lightbulb,
  Search
} from 'lucide-react';

interface Prompt {
  id: string;
  title: string;
  description: string;
  category: 'daily' | 'weekly' | 'special';
  ageGroup: '10-13' | '14-17' | 'all';
  difficulty: 'beginner' | 'intermediate' | 'advanced';
  tags: string[];
  estimatedTime: string;
  parentGuidance: string;
  childQuestion: string;
  followUpQuestions: string[];
}

const ConversationPrompts: React.FC = () => {
  const { userProfile } = useAuth();
  const [selectedCategory, setSelectedCategory] = useState<string>('all');
  const [selectedDifficulty, setSelectedDifficulty] = useState<string>('all');
  const [searchTerm, setSearchTerm] = useState('');

  // Real prompts will be generated by AI based on user preferences
  const [prompts, setPrompts] = useState<Prompt[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    // Load AI-generated prompts based on user profile
    const loadPrompts = async () => {
      if (!userProfile) return;
      
      try {
        setLoading(true);
        // TODO: Generate prompts with AI service based on:
        // - User's role (parent/child)
        // - Child's age if parent
        // - Previous conversation topics
        // - User interests/preferences
        
        // For now, show empty state to encourage real implementation
        setPrompts([]);
      } catch (error) {
        console.error('Error loading prompts:', error);
      } finally {
        setLoading(false);
      }
    };

    loadPrompts();
  }, [userProfile]);

  const categories = [
    { id: 'all', name: 'All Prompts', icon: MessageCircle },
    { id: 'daily', name: 'Daily Chats', icon: Calendar },
    { id: 'weekly', name: 'Deep Dives', icon: Clock },
    { id: 'special', name: 'Special Topics', icon: Star },
  ];

  const difficulties = [
    { id: 'all', name: 'All Levels' },
    { id: 'beginner', name: 'Beginner' },
    { id: 'intermediate', name: 'Intermediate' },
    { id: 'advanced', name: 'Advanced' },
  ];

  const filteredPrompts = prompts.filter(prompt => {
    const matchesCategory = selectedCategory === 'all' || prompt.category === selectedCategory;
    const matchesDifficulty = selectedDifficulty === 'all' || prompt.difficulty === selectedDifficulty;
    const matchesSearch = searchTerm === '' || 
      prompt.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
      prompt.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
      prompt.tags.some(tag => tag.toLowerCase().includes(searchTerm.toLowerCase()));
    
    return matchesCategory && matchesDifficulty && matchesSearch;
  });

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case 'beginner': return 'bg-green-100 text-green-800';
      case 'intermediate': return 'bg-yellow-100 text-yellow-800';
      case 'advanced': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getCategoryIcon = (category: string) => {
    switch (category) {
      case 'daily': return Calendar;
      case 'weekly': return Clock;
      case 'special': return Star;
      default: return MessageCircle;
    }
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div>
        <h1 className="text-2xl font-bold text-gray-900 mb-2">Conversation Prompts</h1>
        <p className="text-gray-600">
          {userProfile?.role === 'parent' 
            ? "Start meaningful conversations with your child about AI and technology."
            : "Explore AI topics through guided discussions with your family."
          }
        </p>
      </div>

      {/* Search and Filters */}
      <div className="flex flex-col md:flex-row gap-4">
        {/* Search */}
        <div className="flex-1">
          <div className="relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
            <input
              type="text"
              placeholder="Search prompts..."
              className="input-field pl-10"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          </div>
        </div>

        {/* Category Filter */}
        <div className="flex space-x-2 overflow-x-auto">
          {categories.map((category) => {
            const Icon = category.icon;
            return (
              <button
                key={category.id}
                onClick={() => setSelectedCategory(category.id)}
                className={`flex items-center space-x-2 px-4 py-2 rounded-lg text-sm font-medium whitespace-nowrap transition-colors ${
                  selectedCategory === category.id
                    ? 'bg-primary-100 text-primary-700'
                    : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                }`}
              >
                <Icon className="h-4 w-4" />
                <span>{category.name}</span>
              </button>
            );
          })}
        </div>

        {/* Difficulty Filter */}
        <select
          value={selectedDifficulty}
          onChange={(e) => setSelectedDifficulty(e.target.value)}
          className="input-field w-auto"
        >
          {difficulties.map((difficulty) => (
            <option key={difficulty.id} value={difficulty.id}>
              {difficulty.name}
            </option>
          ))}
        </select>
      </div>

      {/* Loading State */}
      {loading ? (
        <div className="text-center py-12">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600 mx-auto mb-4"></div>
          <p className="text-gray-600">Loading conversation prompts...</p>
        </div>
      ) : (
        <>
          {/* Prompts Grid */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {filteredPrompts.map((prompt) => {
          const CategoryIcon = getCategoryIcon(prompt.category);
          return (
            <div key={prompt.id} className="card hover:shadow-md transition-shadow duration-200 group">
              <div className="flex items-start justify-between mb-3">
                <div className="flex items-center space-x-2">
                  <CategoryIcon className="h-5 w-5 text-primary-600" />
                  <span className="text-sm text-gray-500 capitalize">{prompt.category}</span>
                </div>
                <span className={`text-xs px-2 py-1 rounded-full ${getDifficultyColor(prompt.difficulty)} capitalize`}>
                  {prompt.difficulty}
                </span>
              </div>

              <h3 className="font-semibold text-gray-900 mb-2 group-hover:text-primary-600 transition-colors">
                {prompt.title}
              </h3>
              
              <p className="text-sm text-gray-600 mb-4 line-clamp-2">
                {prompt.description}
              </p>

              <div className="flex items-center justify-between mb-4">
                <div className="flex items-center space-x-4 text-xs text-gray-500">
                  <div className="flex items-center space-x-1">
                    <Clock className="h-3 w-3" />
                    <span>{prompt.estimatedTime}</span>
                  </div>
                  <div className="flex items-center space-x-1">
                    <Users className="h-3 w-3" />
                    <span>{prompt.ageGroup === 'all' ? 'All ages' : `Ages ${prompt.ageGroup}`}</span>
                  </div>
                </div>
              </div>

              <div className="flex flex-wrap gap-1 mb-4">
                {prompt.tags.slice(0, 3).map((tag, index) => (
                  <span
                    key={index}
                    className="text-xs bg-gray-100 text-gray-600 px-2 py-1 rounded"
                  >
                    {tag}
                  </span>
                ))}
              </div>

              <button className="w-full btn-primary text-sm py-2 flex items-center justify-center space-x-2 group-hover:bg-primary-700 transition-colors">
                <span>Start Conversation</span>
                <ArrowRight className="h-4 w-4 group-hover:translate-x-1 transition-transform" />
              </button>
            </div>
          );
          })}
        </div>

        {filteredPrompts.length === 0 && (
          <div className="text-center py-12">
            <MessageCircle className="h-12 w-12 text-gray-400 mx-auto mb-4" />
            <h3 className="text-lg font-medium text-gray-900 mb-2">No conversation prompts available</h3>
            <p className="text-gray-600 mb-4">
              Conversation prompts will be generated based on your family's learning preferences and interests.
            </p>
            <p className="text-sm text-gray-500">
              Complete your profile setup to get personalized AI conversation starters.
            </p>
          </div>
        )}
        </>
      )}

      {/* Tips Section */}
      <div className="bg-blue-50 rounded-lg p-6">
        <h3 className="text-lg font-semibold text-blue-900 mb-3 flex items-center">
          <Lightbulb className="h-5 w-5 mr-2" />
          Tips for Great Conversations
        </h3>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm text-blue-800">
          <ul className="space-y-2">
            <li>• Create a comfortable, distraction-free environment</li>
            <li>• Let your child lead parts of the discussion</li>
            <li>• Use real-world examples they can relate to</li>
          </ul>
          <ul className="space-y-2">
            <li>• Ask open-ended questions to encourage thinking</li>
            <li>• It's okay to say "I don't know" and explore together</li>
            <li>• Focus on understanding, not being "right"</li>
          </ul>
        </div>
      </div>
    </div>
  );
};

export default ConversationPrompts;